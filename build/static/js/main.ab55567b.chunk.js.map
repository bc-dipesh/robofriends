{"version":3,"sources":["component/card.js","component/cardList.js","component/robots.js","component/searchBox.js","component/scroll.js","component/errorbounday.js","container/app.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","cardComponent","robots","map","user","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","event","searchfield","target","value","filteredRobots","filter","robot","toLowerCase","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,SACpD,6BACI,4BAAKJ,GACL,2BAAIC,MCOLI,EAZE,SAAC,GAAgB,IACxBC,EADuB,EAAbC,OACaC,KAAI,SAACC,GAAU,IAClCC,EAAyBD,EAAzBC,IAAKX,EAAoBU,EAApBV,GAAIC,EAAgBS,EAAhBT,KAAMC,EAAUQ,EAAVR,MACrB,OAAO,kBAAC,EAAD,CAAMS,IAAKA,EAAKX,GAAIA,EAAIC,KAAMA,EAAMC,MAAOA,OAEtD,OACI,6BACKK,ICVAC,EAAS,CAClB,CACIG,IAAK,EACLX,GAAI,EACJC,KAAM,cACNW,SAAU,WACVV,MAAO,0BAEX,CACIS,IAAK,EACLX,GAAI,EACJC,KAAM,gBACNW,SAAU,eACVV,MAAO,wBAEX,CACIS,IAAK,EACLX,GAAI,EACJC,KAAM,kBACNW,SAAU,iBACVV,MAAO,4BAEX,CACIS,IAAK,EACLX,GAAI,EACJC,KAAM,uBACNW,SAAU,iBACVV,MAAO,yBAEX,CACIS,IAAK,EACLX,GAAI,EACJC,KAAM,kBACNW,SAAU,iBACVV,MAAO,4BAEX,CACIS,IAAK,EACLX,GAAI,EACJC,KAAM,gBACNW,SAAU,SACVV,MAAO,0BC/BAW,EARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BAAOA,UAAU,mCAAmCY,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCKrGI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,SADX,MCkBOC,E,YAnBX,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHC,E,iFAQfC,KAAKC,SAAS,CAAEF,UAAU,M,+BAI1B,OAAIC,KAAKF,MAAMC,SACJ,wDAEJC,KAAKT,MAAMK,a,GAhBEM,aCoCbC,E,YA9BX,aAAe,IAAD,8BACV,+CAOJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAP1C,EAAKV,MAAQ,CACTlB,OAAQA,EACR0B,YAAa,IAJP,E,sEAYJ,IAAD,OACCG,EAAiBT,KAAKF,MAAMlB,OAAO8B,QAAO,SAAAC,GAC5C,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS,EAAKf,MAAMQ,YAAYM,kBAEpE,OACI,yBAAKrC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcc,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAQ6B,W,GAvBxBK,IAAMZ,WCKJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ab55567b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200*200`} alt=\"user\"></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardComponent = robots.map((user) => {\r\n        let { key, id, name, email } = user;\r\n        return <Card key={key} id={id} name={name} email={email} />;\r\n    });\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","export const robots = [\r\n    {\r\n        key: 1,\r\n        id: 1,\r\n        name: \"Dipesh B.C.\",\r\n        username: \"bcDipesh\",\r\n        email: \"bcdipeshwork@gmail.com\"\r\n    },\r\n    {\r\n        key: 2,\r\n        id: 2,\r\n        name: \"Anish Ghimire\",\r\n        username: \"ghimireAnish\",\r\n        email: \"ghmreAnish@gmail.com\"\r\n    },\r\n    {\r\n        key: 3,\r\n        id: 3,\r\n        name: \"Pravesh Pansari\",\r\n        username: \"pansariPravesh\",\r\n        email: \"pansariPravesh@gmail.com\"\r\n    },\r\n    {\r\n        key: 4,\r\n        id: 4,\r\n        name: \"Pujan Babu Bhattarai\",\r\n        username: \"bhattaraiPujan\",\r\n        email: \"pujanPrince@gmail.com\"\r\n    },\r\n    {\r\n        key: 5,\r\n        id: 5,\r\n        name: \"Paritosh Mishra\",\r\n        username: \"mishraParitosh\",\r\n        email: \"mishraParitosh@gmail.com\"\r\n    },\r\n    {\r\n        key: 6,\r\n        id: 6,\r\n        name: \"Sushant Shahi\",\r\n        username: \"bhaddu\",\r\n        email: \"bhadduShahi@gmail.com\"\r\n    }\r\n];","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={searchChange}></input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: \"scroll\", border: \"1px solid black\", height: \"800px\"}}>\r\n            {props.children};\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../component/cardList';\r\nimport { robots } from '../component/robots';\r\nimport SearchBox from '../component/searchBox';\r\nimport Scroll from '../component/scroll';\r\nimport ErrorBoundary from '../component/errorbounday';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: ''\r\n        };\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1 className=\"f2\">RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/app';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './container/app.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}